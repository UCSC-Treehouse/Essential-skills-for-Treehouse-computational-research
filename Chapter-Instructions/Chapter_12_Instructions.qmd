---
title: "Chapter 12, Logical Vectors"
format:
  gfm: 
    self-contained: true
---

In this chapter, you’ll learn tools for working with logical vectors.
**Logical vectors** are the simplest type of vector because each element can only be one of three possible values: TRUE, FALSE, and NA.
It’s relatively rare to find logical vectors in your raw data, but you’ll create and manipulate them in the course of almost every analysis.

We’ll begin by discussing the most common way of creating logical vectors: with *numeric comparisons*.
Then you’ll learn about how you can use Boolean algebra to combine different logical vectors, as well as some useful summaries.
We’ll finish off with if_else() and case_when(), two useful functions for making conditional changes powered by logical vectors.

------------------------------------------------------------------------

## Prerequisites

```{r libraries}
library(tidyverse)
library(nycflights13)
```

Let's also make up some dummy data with c():
```{r dummy data}
#| eval: false
x <- c(1, 2, 3, 5, 7, 11, 13)
x * 2
```

Just remember that any manipulation we do to a free-floating vector, you can do to a variable inside a data frame with mutate() and friends.
```{r dummy data tibble}
#| eval: false
df <- tibble(x)
df |> 
  mutate(y = x * 2)
```

------------------------------------------------------------------------

## Comparisons

A very common way to create a logical vector is via a numeric comparison with <, <=, >, >=, !=, and ==.
So far, we’ve mostly created logical variables transiently within filter() — they are computed, used, and then thrown away.
For example, the following filter finds all daytime departures that arrive roughly on time:
```{r numeric comparison}
#| eval: false
flights |> 
  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)
```

It’s useful to know that this is a shortcut and you can explicitly create the underlying logical variables with mutate():
```{r explicitly create logical variables}
#| eval: false
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
    .keep = "used"
  )
```

This is particularly useful for more complicated logic because naming the intermediate steps makes it easier to both read your code and check that each step has been computed correctly.

All up, the initial filter is equivalent to:
```{r numeric comparison with filters}
#| eval: false
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
  ) |> 
  filter(daytime & approx_ontime)
```

------------------------------------------------------------------------

## Floating Point Comparison

Beware of using == with numbers.
For example, it looks like this vector contains the numbers 1 and 2:
```{r equals with numbers}
#| eval: false
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x
```

But if you test them for equality, you get FALSE:
```{r test for 1 and 2 in previous}
#| eval: false
x == c(1, 2)
```

What’s going on?
Computers store numbers with a fixed number of decimal places so there’s no way to exactly represent 1/49 or sqrt(2) and subsequent computations will be very slightly off.
We can see the exact values by calling print() with the digits argument:
```{r exact values with digits}
#| eval: false
print(x, digits = 16)
```

Now that you’ve seen why == is failing, what can you do about it?
One option is to use dplyr::near() which ignores small differences:
```{r near to ignore small differences}
#| eval: false
near(x, c(1, 2))
```

------------------------------------------------------------------------

## Missing Values

Missing values represent the unknown so they are “contagious”: almost any operation involving an unknown value will also be unknown:
```{r missing values are contagious}
#| eval: false
NA > 5

10 == NA

```

The most confusing result is this one:
```{r NA equals NA??}
#| eval: false
NA == NA
```

It’s easiest to understand why this is true if we artificially supply a little more context:
```{r dummy context}
#| eval: false
# We don't know how old Mary is
age_mary <- NA

# We don't know how old John is
age_john <- NA

# Are Mary and John the same age?
age_mary == age_john
```

So if you want to find all flights where dep_time is missing, the following code doesn’t work because dep_time == NA will yield NA for every single row, and filter() automatically drops missing values:
```{r unsuccessful way to find dep_time}
#| eval: false
flights |> 
  filter(dep_time == NA)
```

Instead we’ll need a new tool: is.na().

------------------------------------------------------------------------

## is.na()

is.na(x) works with any type of vector and returns TRUE for missing values and FALSE for everything else:
```{r is.na to find missing values}
#| eval: false
is.na(c(TRUE, NA, FALSE))
is.na(c(1, NA, 3))
is.na(c("a", NA, "b"))
```

We can use is.na() to find all the rows with a missing dep_time:
```{r is.na to find missing dep_time}
#| eval: false
flights |> 
  filter(is.na(dep_time))
```

is.na() can also be useful in arrange().
arrange() usually puts all the missing values at the end but you can override this default by first sorting by is.na():
```{r filter for na then arrange}
#| eval: false
flights |> 
  filter(month == 1, day == 1) |> 
  arrange(dep_time)
```

------------------------------------------------------------------------

## Exercises pt 1 of 4

1. How does dplyr::near() work?
Type near to see the source code.
Is sqrt(2)^2 near 2?

2. Use mutate(), is.na(), and count() together to describe how the missing values in dep_time, sched_dep_time and dep_delay are connected.

------------------------------------------------------------------------

## Boolean Algebra

Once you have multiple logical vectors, you can combine them together using Boolean algebra.
In R, & is “and”, | is “or”, ! is “not”, and xor() is exclusive or.
For example, df |> filter(!is.na(x)) finds all rows where x is not missing and df |> filter(x < -10 | x > 0) finds all rows where x is smaller than -10 or bigger than 0.
As well as & and |, R also has && and ||.
Don’t use them in dplyr functions!
These are called short-circuiting operators and only ever return a single TRUE or FALSE.
They’re important for programming, not data science.

------------------------------------------------------------------------

## Missing Values

The rules for missing values in Boolean algebra are a little tricky to explain because they seem inconsistent at first glance:
```{r missing values in boolean algebra}
#| eval: false
df <- tibble(x = c(TRUE, FALSE, NA))

df |> 
  mutate(
    and = x & NA,
    or = x | NA
  )
```

To understand what’s going on, think about NA | TRUE (NA or TRUE).
A missing value in a logical vector means that the value could either be TRUE or FALSE.
TRUE | TRUE and FALSE | TRUE are both TRUE because at least one of them is TRUE.
NA | TRUE must also be TRUE because NA can either be TRUE or FALSE.
However, NA | FALSE is NA because we don’t know if NA is TRUE or FALSE.
Similar reasoning applies for & considering that both conditions must be fulfilled.
Therefore NA & TRUE is NA because NA can either be TRUE or FALSE and NA & FALSE is FALSE because at least one of the conditions is FALSE.

------------------------------------------------------------------------

## Order of Operations

Note that the order of operations doesn’t work like English.
Take the following code that finds all flights that departed in November or December:
```{r flights depart in nov/dec}
#| eval: false
flights |> 
   filter(month == 11 | month == 12)
```

You might be tempted to write it like you’d say in English: “Find all flights that departed in November or December.”:
```{r incorrect syntax and order of operations}
#| eval: false
flights |> 
   filter(month == 11 | 12)
```

Here, R first evaluates month == 11 creating a logical vector, which we call nov.
It computes nov | 12.
When you use a number with a logical operator it converts everything apart from 0 to TRUE, so this is equivalent to nov | TRUE which will always be TRUE, so every row will be selected:
```{r always true nov equals true}
#| eval: false
flights |> 
  mutate(
    nov = month == 11,
    final = nov | 12,
    .keep = "used"
  )
```

------------------------------------------------------------------------

## %in%

An easy way to avoid the problem of getting your ==s and |s in the right order is to use %in%.
x %in% y returns a logical vector the same length as x that is TRUE whenever a value in x is anywhere in y .
```{r return logical vector}
#| eval: false
1:12 %in% c(1, 5, 11)
letters[1:10] %in% c("a", "e", "i", "o", "u")
```

So to find all flights in November and December we could write:
```{r flight depart nov/dec with %in%}
#| eval: false
flights |> 
  filter(month %in% c(11, 12))
```

Note that %in% obeys different rules for NA to ==, as NA %in% NA is TRUE.
```{r NA in NA is true}
#| eval: false
c(1, 2, NA) == NA
c(1, 2, NA) %in% NA
```

This can make for a useful shortcut:
```{r shortcut with %in%}
#| eval: false
flights |> 
  filter(dep_time %in% c(NA, 0800))
```

------------------------------------------------------------------------

## Exercises pt 2 of 4

1. Find all flights where arr_delay is missing but dep_delay is not.
Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.

2. How many flights have a missing dep_time?
What other variables are missing in these rows?
What might these rows represent?

3. Assuming that a missing dep_time implies that a flight is cancelled, look at the number of cancelled flights per day.
Is there a pattern?
Is there a connection between the proportion of cancelled flights and the average delay of non-cancelled flights?

------------------------------------------------------------------------

## Logical Summaries

There are two main logical summaries: any() and all().
any(x) is the equivalent of |; it’ll return TRUE if there are any TRUE’s in x.
all(x) is equivalent of &; it’ll return TRUE only if all values of x are TRUE’s.
Like most summary functions, you can make the missing values go away with na.rm = TRUE.

For example, we could use all() and any() to find out if every flight was delayed on departure by at most an hour or if any flights were delayed on arrival by five hours or more.
And using group_by() allows us to do that by day:
```{r all and any}
#| eval: false
flights |> 
  group_by(year, month, day) |> 
  summarize(
    all_delayed = all(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

------------------------------------------------------------------------

## Numeric Summaries of Logical Vectors

When you use a logical vector in a numeric context, TRUE becomes 1 and FALSE becomes 0.
This makes sum() and mean() very useful with logical vectors because sum(x) gives the number of TRUEs and mean(x) gives the proportion of TRUEs (because mean() is just sum() divided by length()).

That, for example, allows us to see the proportion of flights that were delayed on departure by at most an hour and the number of flights that were delayed on arrival by five hours or more:
```{r summarize flights delayed vector}
#| eval: false
flights |> 
  group_by(year, month, day) |> 
  summarize(
    proportion_delayed = mean(dep_delay <= 60, na.rm = TRUE),
    count_long_delay = sum(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

------------------------------------------------------------------------

## Logical Subsetting

You can use a logical vector to filter a single variable to a subset of interest.
This makes use of the base [ (pronounced subset) operator.

Imagine we wanted to look at the average delay just for flights that were actually delayed.
One way to do so would be to first filter the flights and then calculate the average delay:
```{r average delayed flights}
#| eval: false
flights |> 
  filter(arr_delay > 0) |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay),
    n = n(),
    .groups = "drop"
  )
```

This works, but what if we wanted to also compute the average delay for flights that arrived early?
We’d need to perform a separate filter step, and then figure out how to combine the two data frames together.
Instead you could use [ to perform an inline filtering: arr_delay[arr_delay > 0] will yield only the positive arrival delays.

This leads to:
```{r positive arrival delays}
#| eval: false
flights |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay[arr_delay > 0], na.rm = TRUE),
    ahead = mean(arr_delay[arr_delay < 0], na.rm = TRUE),
    n = n(),
    .groups = "drop"
  )
```

------------------------------------------------------------------------

## Exercises pt 3 of 4

1. What will sum(is.na(x)) tell you?
How about mean(is.na(x))?

2. What does prod() return when applied to a logical vector?
What logical summary function is it equivalent to?
What does min() return when applied to a logical vector?
What logical summary function is it equivalent to?
Read the documentation and perform a few experiments.

------------------------------------------------------------------------

## if_else()

If you want to use one value when a condition is TRUE and another value when it’s FALSE, you can use dplyr::if_else().
You’ll always use the first three argument of if_else().
The first argument, condition, is a logical vector, the second, true, gives the output when the condition is true, and the third, false, gives the output if the condition is false.

Let’s begin with a simple example of labeling a numeric vector as either “+ve” (positive) or “-ve” (negative):
```{r label numeric vector +/-}
#| eval: false
x <- c(-3:3, NA)
if_else(x > 0, "+ve", "-ve")
```

There’s an optional fourth argument, missing which will be used if the input is NA:
```{r missing argument for missing values}
#| eval: false
if_else(x > 0, "+ve", "-ve", "???")
```

You can also use vectors for the true and false arguments.
For example, this allows us to create a minimal implementation of abs():
```{r vectors for t/f arguments}
#| eval: false
if_else(x < 0, -x, x)
```

So far all the arguments have used the same vectors, but you can of course mix and match.
For example, you could implement a simple version of coalesce() like this:
```{r mix and match vectors}
#| eval: false
x1 <- c(NA, 1, 2, NA)
y1 <- c(3, NA, 4, 6)
if_else(is.na(x1), y1, x1)
```

You might have noticed a small infelicity in our labeling example above: zero is neither positive nor negative.
We could resolve this by adding an additional if_else():
```{r handle zero with if_else}
#| eval: false
if_else(x == 0, "0", if_else(x < 0, "-ve", "+ve"), "???")
```

------------------------------------------------------------------------

## case_when()

dplyr’s case_when() provides a flexible way of performing different computations for different conditions.
It has a special syntax that unfortunately looks like nothing else you’ll use in the tidyverse.
It takes pairs that look like *condition ~ output*. *condition* must be a logical vector; when it’s TRUE, output will be used.

This means we could recreate our previous nested if_else() as follows:
```{r recreate previous nested if_else()}
#| eval: false
x <- c(-3:3, NA)
case_when(
  x == 0   ~ "0",
  x < 0    ~ "-ve", 
  x > 0    ~ "+ve",
  is.na(x) ~ "???"
)
```

This is more code, but it’s also more explicit.

To explain how case_when() works, let’s explore some simpler cases.
If none of the cases match, the output gets an NA:
```{r simple case_when() example}
#| eval: false
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve"
)
```

Use .default if you want to create a “default”/catch all value:
```{r default catch all value}
#| eval: false
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve",
  .default = "???"
)
```

And note that if multiple conditions match, only the first will be used:
```{r when conditions match}
#| eval: false
case_when(
  x > 0 ~ "+ve",
  x > 2 ~ "big"
)
```

Just like with if_else() you can use variables on both sides of the ~ and you can mix and match variables as needed for your problem.
For example, we could use case_when() to provide some human readable labels for the arrival delay:
```{r mix and match variables}
#| eval: false
flights |> 
  mutate(
    status = case_when(
      is.na(arr_delay)      ~ "cancelled",
      arr_delay < -30       ~ "very early",
      arr_delay < -15       ~ "early",
      abs(arr_delay) <= 15  ~ "on time",
      arr_delay < 60        ~ "late",
      arr_delay < Inf       ~ "very late",
    ),
    .keep = "used"
  )
```

------------------------------------------------------------------------

## Compatible Types

Note that both if_else() and case_when() require **compatible** types in the output.
If they’re not compatible, you’ll see errors like this:
```{r incompatible types example}
#| eval: false
if_else(TRUE, "a", 1)
case_when(
  x < -1 ~ TRUE,  
  x > 0  ~ now()
)
```

Overall, relatively few types are compatible, because automatically converting one type of vector to another is a common source of errors.
Here are the most important cases that are compatible:

- *Numeric* and *logical vectors* are compatible.
- *Strings* and *factors* (Chapter 16) are compatible, because you can think of a factor as a string with a restricted set of values.
- *Dates* and *date-times* are compatible because you can think of a date as a special case of date-time.
- *NA*, which is technically a logical vector, is compatible with everything because every vector has some way of representing a missing value.

------------------------------------------------------------------------

## Exercises pt 4 of 4

1. A number is even if it’s divisible by two, which in R you can find out with x %% 2 == 0.
Use this fact and if_else() to determine whether each number between 0 and 20 is even or odd.

2. Given a vector of days like x <- c("Monday", "Saturday", "Wednesday"), use an if_else() statement to label them as weekends or weekdays.

3. Use if_else() to compute the absolute value of a numeric vector called x.

4. Write a case_when() statement that uses the month and day columns from flights to label a selection of important US holidays (e.g., New Years Day, 4th of July, Thanksgiving, and Christmas).
First create a logical column that is either TRUE or FALSE, and then create a character column that either gives the name of the holiday or is NA.